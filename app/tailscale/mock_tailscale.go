// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tailscale

import (
	"context"
	"net"
	"sync"
	"time"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
// 	func TestSomethingThatUsesInterface(t *testing.T) {
//
// 		// make and configure a mocked Interface
// 		mockedInterface := &InterfaceMock{
// 			GetTagsFunc: func(ip net.IP) ([]string, error) {
// 				panic("mock out the GetTags method")
// 			},
// 			RefreshFunc: func(ctx context.Context) error {
// 				panic("mock out the Refresh method")
// 			},
// 			RunFunc: func(ctx context.Context, refreshInterval time.Duration)  {
// 				panic("mock out the Run method")
// 			},
// 		}
//
// 		// use mockedInterface in code that requires Interface
// 		// and then make assertions.
//
// 	}
type InterfaceMock struct {
	// GetTagsFunc mocks the GetTags method.
	GetTagsFunc func(ip net.IP) ([]string, error)

	// RefreshFunc mocks the Refresh method.
	RefreshFunc func(ctx context.Context) error

	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, refreshInterval time.Duration)

	// calls tracks calls to the methods.
	calls struct {
		// GetTags holds details about calls to the GetTags method.
		GetTags []struct {
			// IP is the ip argument value.
			IP net.IP
		}
		// Refresh holds details about calls to the Refresh method.
		Refresh []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RefreshInterval is the refreshInterval argument value.
			RefreshInterval time.Duration
		}
	}
	lockGetTags sync.RWMutex
	lockRefresh sync.RWMutex
	lockRun     sync.RWMutex
}

// GetTags calls GetTagsFunc.
func (mock *InterfaceMock) GetTags(ip net.IP) ([]string, error) {
	if mock.GetTagsFunc == nil {
		panic("InterfaceMock.GetTagsFunc: method is nil but Interface.GetTags was just called")
	}
	callInfo := struct {
		IP net.IP
	}{
		IP: ip,
	}
	mock.lockGetTags.Lock()
	mock.calls.GetTags = append(mock.calls.GetTags, callInfo)
	mock.lockGetTags.Unlock()
	return mock.GetTagsFunc(ip)
}

// GetTagsCalls gets all the calls that were made to GetTags.
// Check the length with:
//     len(mockedInterface.GetTagsCalls())
func (mock *InterfaceMock) GetTagsCalls() []struct {
	IP net.IP
} {
	var calls []struct {
		IP net.IP
	}
	mock.lockGetTags.RLock()
	calls = mock.calls.GetTags
	mock.lockGetTags.RUnlock()
	return calls
}

// Refresh calls RefreshFunc.
func (mock *InterfaceMock) Refresh(ctx context.Context) error {
	if mock.RefreshFunc == nil {
		panic("InterfaceMock.RefreshFunc: method is nil but Interface.Refresh was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRefresh.Lock()
	mock.calls.Refresh = append(mock.calls.Refresh, callInfo)
	mock.lockRefresh.Unlock()
	return mock.RefreshFunc(ctx)
}

// RefreshCalls gets all the calls that were made to Refresh.
// Check the length with:
//     len(mockedInterface.RefreshCalls())
func (mock *InterfaceMock) RefreshCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRefresh.RLock()
	calls = mock.calls.Refresh
	mock.lockRefresh.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *InterfaceMock) Run(ctx context.Context, refreshInterval time.Duration) {
	if mock.RunFunc == nil {
		panic("InterfaceMock.RunFunc: method is nil but Interface.Run was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		RefreshInterval time.Duration
	}{
		Ctx:             ctx,
		RefreshInterval: refreshInterval,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	mock.RunFunc(ctx, refreshInterval)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedInterface.RunCalls())
func (mock *InterfaceMock) RunCalls() []struct {
	Ctx             context.Context
	RefreshInterval time.Duration
} {
	var calls []struct {
		Ctx             context.Context
		RefreshInterval time.Duration
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
